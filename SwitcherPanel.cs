/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

using System.Runtime.InteropServices;

using BMDSwitcherAPI;
using System.IO.Ports;
using System.Threading;
using System.IO;


using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Net.Sockets;
using System.Threading;
using System.Text;
using System.Net.NetworkInformation;
using System.Text.RegularExpressions;
using System.Net.Mail;
using System.Net;
using System.Data.Entity;
using System.Globalization;
using System.Web.Script.Serialization;
using System.Collections;

namespace SwitcherPanelCSharp
{
    public partial class SwitcherPanel : Form
    {
        public IBMDSwitcherDiscovery m_switcherDiscovery;
        public IBMDSwitcher m_switcher;
        public static IBMDSwitcherMixEffectBlock m_mixEffectBlock1;
        public string rouletteState = null;
        public static Object MyGlobalVariable = null;
        public static bool firstcamera = true;
        public static SerialPort mySerialPortCamera = null;
        private SwitcherMonitor m_switcherMonitor;
        private MixEffectBlockMonitor m_mixEffectBlockMonitor;
        public bool m_moveSliderDownwards = false;
        public bool m_currentTransitionReachedHalfway = false;
        private List<InputMonitor> m_inputMonitors = new List<InputMonitor>();
        public static DateTime datatime;

        public RouletteTableEntities1 db = new RouletteTableEntities1();

        //Step 1
        //The Layout is Loaded and Running
        public SwitcherPanel()
        {
            //Display The Layout
            InitializeComponent();

            textBox1.Enabled = false;
            textBox2.Enabled = false;

            textBoxIP.Enabled = false;
            textBoxTransFramesRemaining.Enabled = false;
            //Layout Title
            this.Text = "Switcher Panel - VIP Roulette";
            label10.Text = "Click this button to Connect TCP/IP for Switcher.";
            //Creating A New SwitcherMonitor
            m_switcherMonitor = new SwitcherMonitor();
            // note: this invoke pattern ensures our callback is called in the main thread. We are making double
            // use of lambda expressions here to achieve this.
            // Essentially, the events will arrive at the callback class (implemented by our monitor classes)
            // on a separate thread. We must marshal these to the main thread, and we're doing this by calling
            // invoke on the Windows Forms object. The lambda expression is just a simplification.
            m_switcherMonitor.SwitcherDisconnected += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => SwitcherDisconnected())));
            //Setting up the MixEffectBlock
            m_mixEffectBlockMonitor = new MixEffectBlockMonitor();
            m_mixEffectBlockMonitor.ProgramInputChanged += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => UpdateProgramButtonSelection())));
            m_mixEffectBlockMonitor.PreviewInputChanged += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => UpdatePreviewButtonSelection())));
            m_mixEffectBlockMonitor.TransitionFramesRemainingChanged += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => UpdateTransitionFramesRemaining())));
            m_mixEffectBlockMonitor.TransitionPositionChanged += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => UpdateSliderPosition())));
            m_mixEffectBlockMonitor.InTransitionChanged += new SwitcherEventHandler((s, a) => this.Invoke((Action)(() => OnInTransitionChanged())));
            //Creating A New Switcher Discovery
            try
            {
                m_switcherDiscovery = new CBMDSwitcherDiscovery();
            }
            //If Creation Fails
            catch (Exception e)
            {
                MessageBox.Show(e.Message + " - " + m_switcherDiscovery.ToString());
            }
            //Checking If Creation Was not Successfull
            if (m_switcherDiscovery == null)
            {
                MessageBox.Show("Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed.", "Error");
                Environment.Exit(1);
            }

            //Saving Current Date Time
            datatime = Convert.ToDateTime(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fff"));
            //Start the process with the switche disconnected
            SwitcherDisconnected();
            //Display when the switcher restarted
            label11.Text = datatime.ToString() + " Restarted";
            //Adding 1 hour to current date time
            datatime = datatime.AddHours(1);
            //Display when the next restart will happen
            label12.Text = datatime.ToString() + " Will Restart";

            //setting up an internal timer
            System.Windows.Threading.DispatcherTimer dispatcherTimer = new System.Windows.Threading.DispatcherTimer();
            //Restart Application
            dispatcherTimer.Tick += new EventHandler(dispatcherTimer_Tick);
            dispatcherTimer.Interval = new TimeSpan(60 * 60 * 1000);
            //Start The timer
            dispatcherTimer.Start();
            //Start The Tcp Connetion
            button1_Click(new object(), new EventArgs());
        }
        //Step 2
        private void SwitcherDisconnected()
        {

            //buttonConnect.Enabled = true;
            textBoxSwitcherName.Text = "";

            MixEffectBlockSetEnable(false);

            // Remove all input monitors, remove callbacks
            foreach (InputMonitor inputMon in m_inputMonitors)
            {
                inputMon.Input.RemoveCallback(inputMon);
                inputMon.LongNameChanged -= new SwitcherEventHandler(OnInputLongNameChanged);
            }
            m_inputMonitors.Clear();

            if (m_mixEffectBlock1 != null)
            {
                // Remove callback
                m_mixEffectBlock1.RemoveCallback(m_mixEffectBlockMonitor);

                // Release reference
                m_mixEffectBlock1 = null;
            }

            if (m_switcher != null)
            {
                // Remove callback:
                m_switcher.RemoveCallback(m_switcherMonitor);

                // release reference:
                m_switcher = null;
            }
        }
        //Step 3
        //Restart the application.
        private void dispatcherTimer_Tick(object sender, EventArgs e)
        {
            //If current minute == 1
            //If current second == 1
            //If current millisecond less than 500
            //If label display "Working Good Time

            //Restart the application
            //Reason Unknown
            if (DateTime.Now.Minute.ToString() == "1" && DateTime.Now.Second.ToString() == "1" && DateTime.Now.Millisecond < 500 && label14.Text == "Working Good")
            {
                System.Windows.Forms.Application.Restart();
            }
        }
        //Step 4
        //Start Tcp Connection
        private void button1_Click(object sender, EventArgs e)
        {
            //Set Fail Reason To Nothing
            _BMDSwitcherConnectToFailure failReason = 0;
            //Setting Address to Correct Ip From TextBox
            string address = textBoxIP.Text;
            //Starting a New Thread For Counting, For Multi Tasking
            var thread = new Thread(StartCounting);
            //Running in background
            thread.IsBackground = true;
            //Start the thread
            thread.Start();
            //Enable Button
            button1.Enabled = false;

            try
            {
                var gett = m_switcherDiscovery; // == null;
                //Note that ConnectTo() can take several seconds to return, both for success or failure,
                //depending upon hostname resolution and network response times, so it may be best to
                //do this in a separate thread to prevent the main GUI thread blocking.
                if (temp == 0)
                {
                    m_switcherDiscovery.ConnectTo(address, out m_switcher, out failReason);
                }
            }
            catch (COMException)
            {
                //An exception will be thrown if ConnectTo fails. For more information, see failReason.
                switch (failReason)
                {
                    case _BMDSwitcherConnectToFailure.bmdSwitcherConnectToFailureNoResponse:
                        MessageBox.Show("No response from Switcher", "Error");
                        break;
                    case _BMDSwitcherConnectToFailure.bmdSwitcherConnectToFailureIncompatibleFirmware:
                        MessageBox.Show("Switcher has incompatible firmware", "Error");
                        break;
                    default:
                        MessageBox.Show("Connection failed for unknown reason", "Error");
                        break;
                }
                return;
            }
            if (temp == 0)
            {
                SwitcherConnected();
            }

            label10.Text = "Trying to connect Tcp.";


            // Application.Restart();
            // Environment.Exit(0);
        }
        //Step 4
        //Start Getting Data From The Roulette
        private void StartCounting()
        {
            //Setting TCP Port Number
            var port = textBox2.Text;
            int port1 = 0;
            var Ip = textBox1.Text;
            //IF ip number is empty or Null
            //IF port number is empty or Null
            if (Ip == "" && Ip == null && port == null && port == "")
            {
                //Message That Ip and port are invalid
                MessageBox.Show("Please enter a valid Ip and Port.");
            }
            else
            {
                //Convert Port to int
                port1 = Convert.ToInt32(port);
                try
                {
                    //Connect to TCP Client
                    TcpClient client = new TcpClient(Ip, port1);
                    //Unknown Reason Why Sleeping
                    Thread.Sleep(2000);
                    //Setting Variables
                    string counttemp = "0";
                    var d = 0;
                    //Change Lable To TCP Connected
                    label10.Invoke(new Action(() =>
                    {
                        label10.Text = "Tcp is Connected.";
                    }));

                    //Forever Looop
                    while (true)
                    {
                        Thread.Sleep(1000);
                        //New Network Stream
                        NetworkStream nwStream = client.GetStream();
                        //Set Empty Buffer
                        byte[] buffer = new byte[client.ReceiveBufferSize];
                        //Read The Returned Information
                        int bytesRead = nwStream.Read(buffer, 0, client.ReceiveBufferSize);
                        //Changing the Data TO String
                        string dataReceived = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                        //If The Returned Data is not null
                        if (!string.IsNullOrEmpty(dataReceived))
                        {
                            //Set Text to Working Good
                            this.Invoke((MethodInvoker)delegate ()
                            {
                                label14.Text = "Working Good";
                            });

                            //Splitting the data in different strings 
                            foreach (string indata in dataReceived.Split('\n'))
                            {
                                //If the split data is not null
                                if (!string.IsNullOrEmpty(indata))
                                {
                                    //Spliting the data by ";" and counting the returns
                                    int count = indata.Split(';').Length - 1;
                                    //If returns are greater then 7
                                    label16.Invoke(new Action(() =>
                                    {
                                        label16.Text = "Count : " + count;
                                    }));
                                    if (count >= 6)
                                    {
                                        //split by ;
                                        var rowarray = indata.Split(';');
                                        //Add them to an array 
                                        string rrl = rowarray[1].Replace("\r", string.Empty);
                                        //If rrl Not equal to 0
                                        label15.Invoke(new Action(() =>
                                        {
                                            label15.Text = "Current Wheel Status : " + counttemp + " - " + rrl;
                                        }));
                                        if (counttemp != rrl)
                                        {
                                            counttemp = rrl;
                                            //Start Getting Data And Checking Status
                                            if (count == 6 || count == 7)
                                            {
                                                if (counttemp != rrl || counttemp == rrl)
                                                {
                                                    counttemp = rrl;
                                                    label5.Invoke(new Action(() =>
                                                    {
                                                        label5.Text = "Putty Code : " + indata;
                                                    }));
                                                    if (indata.Contains("*X;1"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "Place Betts")
                                                        {
                                                            MyGlobalVariable = "Place Betts";
                                                            if (firstcamera)
                                                            {
                                                                this.Invoke(new MethodInvoker(delegate
                                                                {
                                                                    if (m_mixEffectBlock1 != null)
                                                                    {
                                                                        m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
                                                                            1);
                                                                    }

                                                                }));
                                                            }

                                                            if (firstcamera == null || firstcamera == false)
                                                            {
                                                                this.Invoke(new MethodInvoker(delegate
                                                                {
                                                                    if (m_mixEffectBlock1 != null)
                                                                    {
                                                                        m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
                                                                            1);
                                                                    }

                                                                }));
                                                            }
                                                        }
                                                        Thread.Sleep(1000);
                                                        this.Invoke((MethodInvoker)delegate ()
                                                        {
                                                            var datas = comboBoxProgramSel.SelectedItem;
                                                            if (datas != null)
                                                            {
                                                                long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;

                                                                if (inputId != 1 && d > 3)
                                                                {
                                                                    temp = 1;
                                                                    System.Windows.Forms.Application.Restart();
                                                                }
                                                            }
                                                        });

                                                    }
                                                    else if (indata.Contains("*X;2"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "Ball Running")
                                                        {
                                                            MyGlobalVariable = "Ball Running";
                                                            this.Invoke(new MethodInvoker(delegate
                                                            {
                                                                if (m_mixEffectBlock1 != null)
                                                                {
                                                                    m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
                                                                        1);
                                                                }

                                                            }));
                                                        }
                                                        //Thread.Sleep(1000);
                                                        //this.Invoke((MethodInvoker)delegate ()
                                                        //{
                                                        //    var datas = comboBoxProgramSel.SelectedItem;
                                                        //    if (datas != null)
                                                        //    {
                                                        //        long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;

                                                        //        if (inputId != 1 && d > 3)
                                                        //        {
                                                        //            temp = 1;
                                                        //            System.Windows.Forms.Application.Restart();
                                                        //        }
                                                        //    }
                                                        //});
                                                    }
                                                    else if (indata.Contains("*X;3"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "LAST BETS")
                                                        {


                                                            MyGlobalVariable = "LAST BETS";

                                                            this.Invoke(new MethodInvoker(delegate
                                                            {
                                                                if (m_mixEffectBlock1 != null)
                                                                {
                                                                    Thread.Sleep(10000);
                                                                    m_mixEffectBlock1.PerformAutoTransition();

                                                                }
                                                            }));

                                                        }
                                                        //Thread.Sleep(1000);
                                                        //this.Invoke((MethodInvoker)delegate ()
                                                        //{
                                                        //    var datas = comboBoxProgramSel.SelectedItem;
                                                        //    if (datas != null)
                                                        //    {
                                                        //        long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;
                                                        //        if (inputId != 1 && d > 3)
                                                        //        {
                                                        //            temp = 1;
                                                        //            System.Windows.Forms.Application.Restart();
                                                        //        }
                                                        //    }
                                                        //});

                                                    }
                                                    else if (indata.Contains("*X;4"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "NO MORE BETTS")
                                                        {
                                                            MyGlobalVariable = "NO MORE BETTS";
                                                            this.Invoke(new MethodInvoker(delegate
                                                            {
                                                                if (m_mixEffectBlock1 != null)
                                                                {
                                                                    Thread.Sleep(2000);
                                                                    m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
                                                                        2);
                                                                }

                                                            }));

                                                            Thread.Sleep(1000);
                                                            this.Invoke((MethodInvoker)delegate ()
                                                            {
                                                                var datas = comboBoxProgramSel.SelectedItem;
                                                                if (datas != null)
                                                                {
                                                                    long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;
                                                                    if (inputId != 2 && d > 3)
                                                                    {
                                                                        temp = 1;                                                                        
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                    else if (indata.Contains("*X;5"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "Winning Number")
                                                        {
                                                            MyGlobalVariable = "Winning Number";
                                                            var errlog = db.Errorlogtables.OrderByDescending(x => x.Id).Select(a => a.Errortext).FirstOrDefault();
                                                            if (errlog != "Cam 2" && d > 3)
                                                            {
                                                               
                                                            }
                                                            this.Invoke(new MethodInvoker(delegate
                                                            {
                                                                if (m_mixEffectBlock1 != null)
                                                                {
                                                                    Thread.Sleep(1000);
                                                                    m_mixEffectBlock1.PerformAutoTransition();

                                                                    Errorlogtable ee = new Errorlogtable();
                                                                    ee.Datetime = DateTime.Now;
                                                                    ee.Errortext = "Cam 1";
                                                                    db.Errorlogtables.Add(ee);
                                                                    db.SaveChanges();
                                                                }
                                                            }));
                                                        }

                                                        //Thread.Sleep(1000);
                                                        //this.Invoke((MethodInvoker)delegate ()
                                                        //{
                                                        //    var datas = comboBoxProgramSel.SelectedItem;
                                                        //    if (datas != null)
                                                        //    {
                                                        //        long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;
                                                        //        if (inputId != 2 && d > 3)
                                                        //        {
                                                        //            temp = 1;
                                                        //            System.Windows.Forms.Application.Restart();
                                                        //        }
                                                        //    }
                                                        //});
                                                    }
                                                    else if (indata.Contains("*X;6;"))
                                                    {
                                                        if (MyGlobalVariable == null || MyGlobalVariable != "Table Closed")
                                                        {
                                                            MyGlobalVariable = "Table Closed";
                                                        }
                                                    }
                                                    else if (indata.ToArray().ElementAt(0) == '1' || indata.ToArray().ElementAt(0) == '0' || indata.ToArray().ElementAt(0) == '2' || indata.ToArray().ElementAt(0) == '3' || indata.ToArray().ElementAt(0) == '4' || indata.ToArray().ElementAt(0) == '5' || indata.ToArray().ElementAt(0) == '6' || indata.ToArray().ElementAt(0) == '7' || indata.ToArray().ElementAt(0) == '8' || indata.ToArray().ElementAt(0) == '9' || indata.ToArray().ElementAt(0) == ' ')
                                                    {
                                                        if (indata.ToArray().Length < 3)
                                                        {

                                                        }
                                                        if (firstcamera)
                                                        {
                                                            firstcamera = false;
                                                        }
                                                        else
                                                        {
                                                            firstcamera = true;
                                                        }
                                                        MyGlobalVariable = "Box on";
                                                        Thread.Sleep(6000);
                                                    }
                                                    else
                                                    {
                                                        Console.WriteLine(indata);

                                                    }
                                                }
                                                d++;
                                            }
                                        }
                                        d++;
                                    }
                                }
                            }
                        }
                        //If the data returned is empty
                        else
                        {
                            label17.Invoke(new Action(() =>
                            {
                                label17.Text = "Data Recieved Was Null : " + "Data Received : " + dataReceived;
                            }));
                            Thread.Sleep(1000);
                            this.Invoke((MethodInvoker)delegate ()
                            {
                                if (label14.Text != "No Data from TCP")
                                {
                                    this.Invoke((MethodInvoker)delegate ()
                                    {
                                        label14.Text = "No Data from TCP";
                                    });
                                    try
                                    {

                                        ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3;
                                        System.Net.ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;
                                        ServicePointManager.ServerCertificateValidationCallback = (snder, cert, chain, error) => true;
                                        //Get List Of Open Tables
                                        var json = new WebClient().DownloadString("https://smartcasino.portomasonline.com/live-game-control/table/tableManagerRealTimeJSON.jss?previousContextId=6553989&businessOperatorId=131456");
                                        object yourOjbect = new JavaScriptSerializer().DeserializeObject(json);
                                        var result = ((IEnumerable)yourOjbect).Cast<object>().ToList();

                                        char[] charsToTrim = { ']', '}', '{', '[', ' ' };

                                        for (var i = 0; i < result.Count; i++)
                                        {
                                            var newlist = ((IEnumerable)result[i]).Cast<object>().ToList();

                                            if (newlist[0].ToString().Split(',')[1].TrimEnd(charsToTrim).ToLower().Contains("qstudio") && newlist[1].ToString().Split(',')[1].TrimEnd(charsToTrim).ToLower().Contains("true"))
                                            {

                                            }

                                        }

                                        System.Windows.Forms.Application.Restart();
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                }
                            });

                        }
                    }

                }
                catch (Exception ex)
                {
                    label17.Invoke(new Action(() =>
                    {
                        label17.Text = "Error : " + ex;
                    }));
                }

            }
        }





        private void OnInputLongNameChanged(object sender, object args)
        {
            this.Invoke((Action)(() => UpdatePopupItems()));
        }
        private void SwitcherConnected()
        {



            // Get the switcher name:
            string switcherName;
            m_switcher.GetProductName(out switcherName);
            textBoxSwitcherName.Text = switcherName;

            // Install SwitcherMonitor callbacks:
            m_switcher.AddCallback(m_switcherMonitor);

            // We create input monitors for each input. To do this we iterate over all inputs:
            // This will allow us to update the combo boxes when input names change:
            IBMDSwitcherInputIterator inputIterator = null;
            IntPtr inputIteratorPtr;
            Guid inputIteratorIID = typeof(IBMDSwitcherInputIterator).GUID;
            m_switcher.CreateIterator(ref inputIteratorIID, out inputIteratorPtr);
            if (inputIteratorPtr != null)
            {
                inputIterator = (IBMDSwitcherInputIterator)Marshal.GetObjectForIUnknown(inputIteratorPtr);
            }

            if (inputIterator != null)
            {
                IBMDSwitcherInput input;
                inputIterator.Next(out input);
                while (input != null)
                {
                    InputMonitor newInputMonitor = new InputMonitor(input);
                    input.AddCallback(newInputMonitor);
                    newInputMonitor.LongNameChanged += new SwitcherEventHandler(OnInputLongNameChanged);

                    m_inputMonitors.Add(newInputMonitor);

                    inputIterator.Next(out input);
                }
            }

            // We want to get the first Mix Effect block (ME 1). We create a ME iterator,
            // and then get the first one:
            m_mixEffectBlock1 = null;

            IBMDSwitcherMixEffectBlockIterator meIterator = null;
            IntPtr meIteratorPtr;
            Guid meIteratorIID = typeof(IBMDSwitcherMixEffectBlockIterator).GUID;
            m_switcher.CreateIterator(ref meIteratorIID, out meIteratorPtr);
            if (meIteratorPtr != null)
            {
                meIterator = (IBMDSwitcherMixEffectBlockIterator)Marshal.GetObjectForIUnknown(meIteratorPtr);
            }

            if (meIterator == null)
                return;

            if (meIterator != null)
            {
                meIterator.Next(out m_mixEffectBlock1);
            }

            if (m_mixEffectBlock1 == null)
            {
                MessageBox.Show("Unexpected: Could not get first mix effect block", "Error");
                return;
            }

            // Install MixEffectBlockMonitor callbacks:
            m_mixEffectBlock1.AddCallback(m_mixEffectBlockMonitor);

            MixEffectBlockSetEnable(true);
            UpdatePopupItems();
            UpdateTransitionFramesRemaining();
            UpdateSliderPosition();
        }
        private void MixEffectBlockSetEnable(bool enable)
        {
            comboBoxProgramSel.Enabled = enable;
            comboBoxPreviewSel.Enabled = enable;
            buttonAuto.Enabled = enable;
            buttonCut.Enabled = enable;
            trackBarTransitionPos.Enabled = enable;
        }
        private void UpdatePopupItems()
        {
            // Clear the combo boxes:
            comboBoxProgramSel.Items.Clear();
            comboBoxPreviewSel.Items.Clear();

            // Get an input iterator.
            IBMDSwitcherInputIterator inputIterator = null;
            IntPtr inputIteratorPtr;
            Guid inputIteratorIID = typeof(IBMDSwitcherInputIterator).GUID;
            m_switcher.CreateIterator(ref inputIteratorIID, out inputIteratorPtr);
            if (inputIteratorPtr != null)
            {
                inputIterator = (IBMDSwitcherInputIterator)Marshal.GetObjectForIUnknown(inputIteratorPtr);
            }

            if (inputIterator == null)
                return;

            IBMDSwitcherInput input;
            inputIterator.Next(out input);
            while (input != null)
            {
                string inputName;
                long inputId;

                input.GetInputId(out inputId);
                input.GetLongName(out inputName);

                // Add items to list:
                comboBoxProgramSel.Items.Add(new StringObjectPair<long>(inputName, inputId));
                comboBoxPreviewSel.Items.Add(new StringObjectPair<long>(inputName, inputId));

                inputIterator.Next(out input);
            }

            UpdateProgramButtonSelection();
            UpdatePreviewButtonSelection();
        }
        private void UpdateProgramButtonSelection()
        {
            long programId;

            m_mixEffectBlock1.GetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput, out programId);

            // Select the program popup entry that matches the input id:
            foreach (StringObjectPair<long> item in comboBoxProgramSel.Items)
            {
                if (item.value == programId)
                {
                    comboBoxProgramSel.SelectedIndex = comboBoxProgramSel.Items.IndexOf(item);
                    break;
                }
            }
        }
        private void UpdatePreviewButtonSelection()
        {
            long previewId;

            m_mixEffectBlock1.GetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdPreviewInput, out previewId);

            // Select the program popup entry that matches the input id:
            foreach (StringObjectPair<long> item in comboBoxPreviewSel.Items)
            {
                if (item.value == previewId)
                {
                    comboBoxPreviewSel.SelectedIndex = comboBoxPreviewSel.Items.IndexOf(item);
                    break;
                }
            }
        }
        private void UpdateTransitionFramesRemaining()
        {
            long framesRemaining;



            m_mixEffectBlock1.GetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining, out framesRemaining);
            // framesRemaining = framesRemaining- 10; //10

            // if (framesRemaining > 18)
            // {
            textBoxTransFramesRemaining.Text = String.Format("{0}", framesRemaining);
            // }
        }
        private void UpdateSliderPosition()
        {
            double transitionPos;

            m_mixEffectBlock1.GetFloat(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, out transitionPos);

            //// good working
            m_currentTransitionReachedHalfway = (transitionPos >= 0.50);    //before its was 0.50       //good working 1.9

            if (m_moveSliderDownwards)
                trackBarTransitionPos.Value = 100 - (int)(transitionPos * 100);   // before it was 100, 1000
            else
                trackBarTransitionPos.Value = (int)(transitionPos * 100); // 500


            //// changes need for testing 
            //m_currentTransitionReachedHalfway = (transitionPos >= 0.50);    //before its was 0.50       //good working 1.9

            //if (m_moveSliderDownwards)
            //    trackBarTransitionPos.Value = 100 - (int)(transitionPos * 100);   // before it was 100
            //else
            //    trackBarTransitionPos.Value = (int)(transitionPos * 100);
        }
        private void comboBoxProgramSel_SelectedIndexChanged(object sender, EventArgs e)
        {
            long inputId = ((StringObjectPair<long>)comboBoxProgramSel.SelectedItem).value;


            // MessageBox.Show(inputId.ToString());

            if (m_mixEffectBlock1 != null)
            {
                m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
                    inputId);
            }
        }
        private void comboBoxPreviewSel_SelectedIndexChanged(object sender, EventArgs e)
        {
            long inputId = ((StringObjectPair<long>)comboBoxPreviewSel.SelectedItem).value;

            if (m_mixEffectBlock1 != null)
            {
                m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdPreviewInput,
                    inputId);
            }
        }
        private void buttonAuto_Click(object sender, EventArgs e)
        {
            if (m_mixEffectBlock1 != null)
            {
                m_mixEffectBlock1.PerformAutoTransition();
            }
        }
        private void buttonCut_Click(object sender, EventArgs e)
        {
            if (m_mixEffectBlock1 != null)
            {
                m_mixEffectBlock1.PerformCut();
            }
        }
        private void trackBarTransitionPos_Scroll(object sender, EventArgs e)
        {
            if (m_mixEffectBlock1 != null)
            {
                double position = trackBarTransitionPos.Value / 100.0; //100.0     450.0
                if (m_moveSliderDownwards)
                    position = (100 - trackBarTransitionPos.Value) / 100.0;         //100 - 100.0  300- 450.0

                m_mixEffectBlock1.SetFloat(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdTransitionPosition,
                    position);
            }
        }
        private void OnInTransitionChanged()
        {
            int inTransition;

            m_mixEffectBlock1.GetFlag(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdInTransition, out inTransition);

            if (inTransition == 0)
            {
                // Toggle the starting orientation of slider handle if a transition has passed through halfway
                if (m_currentTransitionReachedHalfway)
                {
                    m_moveSliderDownwards = !m_moveSliderDownwards;
                    UpdateSliderPosition();
                }
                m_currentTransitionReachedHalfway = false;
            }
        }
        //private void buttonConnect_Click(object sender, EventArgs e)
        //{


        //    mySerialPortCamera = new SerialPort(txtroulette.Text);
        //    _BMDSwitcherConnectToFailure failReason = 0;
        //    string address = textBoxIP.Text;
        //    try
        //    {
        //         //Note that ConnectTo() can take several seconds to return, both for success or failure,
        //         //depending upon hostname resolution and network response times, so it may be best to
        //         //do this in a separate thread to prevent the main GUI thread blocking.
        //        m_switcherDiscovery.ConnectTo(address, out m_switcher, out failReason);
        //    }
        //    catch (COMException)
        //    {
        //         //An exception will be thrown if ConnectTo fails. For more information, see failReason.
        //        switch (failReason)
        //        {
        //            case _BMDSwitcherConnectToFailure.bmdSwitcherConnectToFailureNoResponse:
        //                MessageBox.Show("No response from Switcher", "Error");
        //                break;
        //            case _BMDSwitcherConnectToFailure.bmdSwitcherConnectToFailureIncompatibleFirmware:
        //                MessageBox.Show("Switcher has incompatible firmware", "Error");
        //                break;
        //            default:
        //                MessageBox.Show("Connection failed for unknown reason", "Error");
        //                break;
        //        }
        //        return;
        //    }
        //    SwitcherConnected();

        //    mySerialPortCamera.Close();
        //    if (mySerialPortCamera.IsOpen)
        //    {
        //        mySerialPortCamera.Close();
        //    }
        //    mySerialPortCamera.BaudRate = 9600;
        //    mySerialPortCamera.Encoding = Encoding.ASCII;
        //    mySerialPortCamera.Parity = Parity.None;
        //    mySerialPortCamera.StopBits = StopBits.One;
        //    mySerialPortCamera.DataBits = 8;
        //    mySerialPortCamera.ReadBufferSize = 4096;
        //    mySerialPortCamera.NewLine = "\r\n";
        //    mySerialPortCamera.Handshake = Handshake.None;
        //    mySerialPortCamera.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
        //    try
        //    {
        //        if (MyGlobalVariable == null)
        //        {
        //            mySerialPortCamera.Open();

        //            Console.Read();
        //        }
        //        else
        //        {
        //            mySerialPortCamera.DiscardInBuffer();
        //            mySerialPortCamera.Close();
        //        }
        //    }catch(Exception ex)
        //    {
        //        MessageBox.Show(ex.Message + " "+ "CLOSE");

        //    }

        //}
        //private void DataReceivedHandler(object sender, EventArgs e)
        //{


        //    string counttemp = "0";// bool lastbetscamera = true;     
        //    var d = 0;
        //    SerialPort sp = (SerialPort)sender;
        //    string indata = sp.ReadLine();

        //    // MessageBox.Show("START");
        //    int count = indata.Split(';').Length - 1;


        //    if (count == 6 || count == 7)
        //    {
        //        var rowarray = indata.Split(';');
        //        string rrl = rowarray[1].Replace("\r", string.Empty);
        //        if (counttemp != rrl)
        //        {
        //            counttemp = rrl;

        //            if (indata.Contains("*X;1"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "Place Betts")
        //                {
        //                    MyGlobalVariable = "Place Betts";
        //                    if (firstcamera)
        //                    {
        //                        mySerialPortCamera.Write("C1");
        //                        this.Invoke(new MethodInvoker(delegate
        //                        {
        //                            if (m_mixEffectBlock1 != null)
        //                            {
        //                                m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                                    1);
        //                            }

        //                        }));
        //                    }

        //                    if (firstcamera == null || firstcamera == false)
        //                    {
        //                        mySerialPortCamera.Write("C1");

        //                        this.Invoke(new MethodInvoker(delegate
        //                        {
        //                            if (m_mixEffectBlock1 != null)
        //                            {
        //                                m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                                    1);
        //                            }

        //                        }));
        //                    }
        //                }
        //            }
        //            else if (indata.Contains("*X;2"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "Ball Running")
        //                {
        //                    MyGlobalVariable = "Ball Running";
        //                    mySerialPortCamera.Write("C1");

        //                    this.Invoke(new MethodInvoker(delegate
        //                    {
        //                        if (m_mixEffectBlock1 != null)
        //                        {
        //                            m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                                1);
        //                        }

        //                    }));
        //                }
        //            }

        //            else if (indata.Contains("*X;3"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "LAST BETS")
        //                {


        //                    MyGlobalVariable = "LAST BETS";
        //                    mySerialPortCamera.Write("C2");




        //                    this.Invoke(new MethodInvoker(delegate
        //                    {
        //                        if (m_mixEffectBlock1 != null)
        //                        {

        //                            Thread.Sleep(2000);
        //                            m_mixEffectBlock1.PerformAutoTransition();

        //                        }
        //                    }));

        //                }

        //            }
        //            else if (indata.Contains("*X;4"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "NO MORE BETTS")
        //                {
        //                    MyGlobalVariable = "NO MORE BETTS";
        //                    mySerialPortCamera.Write("C2");
        //                    // MessageBox.Show("1" + "4");

        //                    this.Invoke(new MethodInvoker(delegate
        //                    {
        //                        if (m_mixEffectBlock1 != null)
        //                        {
        //                            Thread.Sleep(2000);
        //                            m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                                2);
        //                        }

        //                    }));

        //                }
        //            }
        //            else if (indata.Contains("*X;5"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "Winning Number")
        //                {
        //                    MyGlobalVariable = "Winning Number";
        //                    mySerialPortCamera.Write("C1");


        //                    this.Invoke(new MethodInvoker(delegate
        //                    {
        //                    if (m_mixEffectBlock1 != null)
        //                    {
        //                         Thread.Sleep(1000);
        //                         m_mixEffectBlock1.PerformAutoTransition();


        //                     }
        //                 }));
        //                }
        //            }
        //            else if (indata.Contains("*X;6;"))
        //            {
        //                if (MyGlobalVariable == null || MyGlobalVariable != "Table Closed")
        //                {
        //                    MyGlobalVariable = "Table Closed";
        //                }
        //            }
        //            else if (indata.ToArray().ElementAt(0) == '1' || indata.ToArray().ElementAt(0) == '0' || indata.ToArray().ElementAt(0) == '2' || indata.ToArray().ElementAt(0) == '3' || indata.ToArray().ElementAt(0) == '4' || indata.ToArray().ElementAt(0) == '5' || indata.ToArray().ElementAt(0) == '6' || indata.ToArray().ElementAt(0) == '7' || indata.ToArray().ElementAt(0) == '8' || indata.ToArray().ElementAt(0) == '9' || indata.ToArray().ElementAt(0) == ' ')
        //            {
        //                if (indata.ToArray().Length < 3)
        //                {

        //                    //    COMMENTED BY VISHNU TO CHEKC THE ROULETTE CAMERA TURINIGN OR NOT
        //                    //this.Invoke(new MethodInvoker(delegate
        //                    //{
        //                    //    if (m_mixEffectBlock1 != null)
        //                    //    {
        //                    //        m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                    //            1);
        //                    //    }
        //                    //    buttonAuto.PerformClick();
        //                    //    mySerialPortCamera.Write("C1");
        //                    //    // load the control with the appropriate data
        //                    //}));
        //                    //if (indata.ToArray().ElementAt(0) == ' ')
        //                    //{
        //                    //    this.Invoke(new MethodInvoker(delegate
        //                    //    {

        //                    //        if (m_mixEffectBlock1 != null)
        //                    //        {
        //                    //            m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                    //                2);
        //                    //        }
        //                    //        buttonAuto.PerformClick();
        //                    //        mySerialPortCamera.Write("C2");

        //                    //    }));


        //                    //}
        //                    //else
        //                    //{
        //                    //    if (m_mixEffectBlock1 != null)
        //                    //    {
        //                    //        m_mixEffectBlock1.SetInt(_BMDSwitcherMixEffectBlockPropertyId.bmdSwitcherMixEffectBlockPropertyIdProgramInput,
        //                    //            1);
        //                    //    }
        //                    //    buttonAuto.PerformClick();
        //                    //    mySerialPortCamera.Write("C1");



        //                    //}

        //                }


        //                //Console.WriteLine("Winning NUMBER = " + indata);
        //                if (firstcamera)
        //                {
        //                    firstcamera = false;

        //                }
        //                else
        //                {
        //                    firstcamera = true;
        //                }
        //                MyGlobalVariable = "Box on";
        //                Thread.Sleep(6000);
        //            }
        //            else
        //            {
        //                Console.WriteLine(indata);

        //            }
        //        }
        //        d++;
        //    }
        //}
        /// <summary>
        /// Used for putting other object types into combo boxes.
        /// </summary>
        struct StringObjectPair<T>
        {
            public string name;
            public T value;

            public StringObjectPair(string name, T value)
            {
                this.name = name;
                this.value = value;
            }

            public override string ToString()
            {
                return name;
            }
        }
        private void txtroulette_TextChanged(object sender, EventArgs e)
        {

        }
        private void textBoxIP_TextChanged(object sender, EventArgs e)
        {

        }
        public static int temp = 0;

        #region UI Elements
        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }
        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void SwitcherPanel_Load(object sender, EventArgs e)
        {

        }

        private void eventLog1_EntryWritten(object sender, System.Diagnostics.EntryWrittenEventArgs e)
        {

        }

        private void groupBox2_Enter(object sender, EventArgs e)
        {

        }

        private void label15_Click(object sender, EventArgs e)
        {

        }

        private void label16_Click(object sender, EventArgs e)
        {

        }

        private void label17_Click(object sender, EventArgs e)
        {

        }

        private void label14_Click(object sender, EventArgs e)
        {

        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void groupBox3_Enter(object sender, EventArgs e)
        {

        }
        #endregion

        private void Version_Click(object sender, EventArgs e)
        {

        }

        private void buttonConnect_Click(object sender, EventArgs e)
        {

        }
    }
}
